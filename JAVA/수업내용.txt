1. 자바시작하기
	- 프로그래밍 언어?
				: 사람이 컴퓨터에 명령을 시키는 문자 체계
		* 기계어
				: 컴퓨터가 이해할수 있는 명령어
				ex) 01010101 dlwlstn cprPdml qkdlxm zhem
		* 어셈블리어
				: 기계어를 사람이 이해할 수 있도록 기호화해놓은 언어
		* 고급언어
				: 사람이 이해할 수 있는 언어로, 컴퓨터에 명령을 보내는 코드
				ex) C언어, Java, Python, JavaScript
			
	- Java?
		: 객체지향 프로그래밍 언어
			- 플랫폼 독립적
			- 자동으로 메모리 관리
				* 가비지 컬렉터
					: 더 이상 사용되지 않는 객체 메모리를 JVM이 자동으로 해제시켜주는 기능 
			- 멀티 스레드 지원
					: 여러 작업을 동시에 수행할 수 있도록 지원
	
	- 자바 프로그램 실행 과정
		: JAVA 프로그램은 플랫폼(OS)에 종속적이 아니다.
		1. 자바 소스 코드 작성(.java)
		2. 컴파일(Compile)
		3. 자바 바이트 코드(.class) : JV에서 실행 가능한 이진수 코드
		4. 자바 프로그램 실행(JVM) : JVM은 해당 OS에서만 실행되기에 종속적이다.
	
	- 개발 환경 설치
		1. JDK (Java Development Kit)
			: 자바 프로그램 개발 도구
				- javac 컴파일러, java 디버거
				- java API 클래스 및 모듈 파일들, 샘플 코드 등
				- JDK 설치 시, JRE가 포함되어 설치
		
		2. JRE (Java Runtime Environment)
			: 자바 프로그램 실행 환경
				- JVM 포함
				- 컴파일된 Java API 파일들
		
		3. IDE (통합 개발 환경: Integrated Development Environment)
				- 소스 코드 작성 및 편집
				- 컴파일, 디버깅, 빌드도구, 버전관리(Git),테스트 도구 등 다양한 기능 제공
				- Java에서 주로 사용되는 IDE
					* Eclipse
					* IntelliJ IDEA
					* Visual Studio Code (VS Code)
					
	- 기본 코드 용어
		* package 패키지명: 소스파일의 위치를 명시하는 키워드
		* public class 클래스명{} : 클래스 블록을 정의
								: 클래스명 = 파일명
								: public class Hello{ }
								: Hello.java
								
		* public static void main(String[] args) { } 
								: 메소드 블록을 정의
								: main() 메소드는 프로그램의 시작			
								
	- 주석: 실행과 상관없이 코드에 대한 설명을 작성한 부분
		* 한 줄 주석	: //				
		* 여러 줄 주석	: /*	*/			
		* 문서 주석	: /**	*/
		
	- 실행문
		* int a = 10;			
				:변수 선언 실행문
		* System.out.println();
				: 메소드 호출 실행문
		* 클래스명.객체변수.메소드명();
				: 실행문 끝에는 항상 세미콜론(;) 반드시 붙여야 한다.
			
	- 인스턴스 변수나 메소드로 정의
				: 클래스명 객체명 = new 클래스명();
				- 객체생성
				: 객체명.메소드명()	
				- 메소드 호출				
	- static 변수나 메소드로 정의
				: 클래스명.메소드명();
				- 객체 생성없이 바로 메소드 호출	
				
				
2. 변수와 타입
	- 변수 선언
		* 자료형 변수명;
				: 변수명은 관례적으로 카멜 케이스
				: ex) int simpleValue;		
			
	- 변수 선언 및 초기화
		* 자료형 변수명 = 값;
		
	- 기본타입(자료형)
		* (char, byte, short, int, long, float, double, boolean) 8개
		
	- 타입 변환
		* 자동 형 변환
				: 작은 타입을 큰 타입에 대입할 때, 큰 타입으로 자동 변환되는 것
				: int a = 10;
			  	  double b = a;
		* 강제 형 변환
				: 큰 타입을 작은 타입에 대입할 때, 작은 타입으로 명시해서 변환하는 것
				: double a = 12.34;
			  	  int b = (int) a;
			  
3. 연산자
	- 분류: 단항/이항/삼항
		* 단항
				: +, -, ~
		* 이항
				: +, -, *, /, =....
		* 삼항
				: 조건식 ? 참값 : 거짓값;
	- 비교 연산자
				: > ㅡ >= <= == !=
	- 논리 연산자
				: AND-&&, OR-||, NOT-!
	- 조건 연산자	
				: 조건식 ? 참값 : 거짓값;
			
4. 제어문 (조건문과 반복문)
	- 조건문
		* if, if~else, if~else if~else
		* switch
	-반복문
		* for
		* foreach
		* while
		* do ~ while
	-기타 제어문
		* break
		* continue
		
5. 참조타입
	- 데이터 타입
		* 기본타입
				: 정수 타입
			      실수 타입
			      논리 타입
		* 참조 타입
				: 배열 타입
			      열거 타입(enum)
			      클래스
			      인터페이스
			  
6. 클래스
				: 객체를 정의하는 설계도
	- 멤버
				: 변수, 메소드
	- 생성자
				: 객체가 생성될 때, 실행되는 메소드
			  	  객체의 멤버를 초기화 하는 역활
		* this
				: 객체 자기 자신을 가르키는 레퍼런스
		* this()
				: 생성자 내에서 다른 생성자를 호출하는 메소드
		* super
				: 부모 객체를 가르키는 레퍼런스
		* super()
				: 자식 생성자에서 부모 생성자를 호출하는 메소드	
			
7. 상속
	- 상속
		* 부모 클래스의 변수, 메소드를 자식 클래스에서 재사용하는것
				: 키워드 - extends
		* 관계
				: 부모클래스(Super Class) 자식 클래스(Sub Class)
			
	- 클래스 타입 변환
		* 업캐스팅
				: 부모 클래스 = 자식 클래스
		* 다운 캐스팅 (강제타입변환)
				: 자식 클래스 = (자식타입) 부모클래스
				: 업캐스팅 후 다운 캐스팅 가능
			
8. 객체지향 프로그래밍
	- 다형성
		* 메소드 오버로딩
				: 메소드 중복 정의
				: 같은 클래스 내에서 매개변수의 타입/순서/개수를 다르게 하여 중복 정의하는 것
		* 메소드 오버라이딩
				: 메소드 재정의
				: 부모 클래스의 정의된 메소드를 자식 클래스에서 다시 정의하는 것
				: 자식 객체 생성 시, 동적 할당으로 인해 부모 클래스의 메소드를 무시하고 자식 클래스의 메소드를 우선하여 실행한다.
		* 추상 클래스
				: 클래스들의 공통된 특성을 추출하여 선언한 클래스
		* 인터페이스
				: 상수와 추상메소드를 중점으로 정의한 구조
	
	- 캡슐화
		* 접근 지정자
				: 외부에서 해당 클래스/메소드/변수에 접근할 수 있는 범위를 지정하는 키워드
				: 종류 - public > protected > default > private
				: pubilc	전체에서 접근 가능
			 	  protected 같은 패키지 + 다른 패키지의 상속 받은 자식 클래스
			  	  default	같은 패키지 안에서 접근 가능
			 	  private   클래스 내에서만 접근 가능
		* getter()
				: 변수의 값을 가져오는 메소드
		* setter()
				: 변수의 값을 지정하는 메소드
		* toString()
				: Object 클래스에 정의된 메소드
				: 오버라이딩하여 문자열 템플릿을 리턴하면 객체 출력시, 지정한 문자열 형식으로 출력하게 해주는 메소드
			
	- static
				: "고정된" 이라는 뜻을 가지고, 변수/메소드을 클래스가 로딩할 때, 제일 먼저 메모리 공간에 고정하는 키워드
				: 객체를 생성하지 않고도 사용할 수 있다.
				: 프로그램 시작 시, 메모리에 할당되고 종료할 때 해제된다.
				: 모든 객체가 static 멤버를 공유한다.
				: 메모리 영역 중 메소드 영역에 static 영역에 할당 된다.
			
	- final
				: 마지막
		* final 클래스
				: 마지막 클래스, 상속하지 못하도록 막은 것
		* final 메소드
				: 마지막 메소드, 오버라이딩 하지 못하도록 막는 것
		* final 변수
				: 마지막 변수, 값을 한 번만 초기화 하고 값 변경 불가		
		
	- 추상화
				: 공통된 특징을 뽑아내서 간추려 내는 것
		* 추상 클래스
				: 클래스들의 공통된 특성을 추출하여 선언한 클래스
		* 키워드 abstarct
		 		: 구현 클래스에서 사용할 변수/메소드 이름을 통일
		 	  	  구현 클래스에서 추상 메소드를 반드시 오버라이딩 해야 한다.
		 	  	  설계자와 코더 각각의 어부인 설계와 코드 작업 분업화
		* 인터페이스
				: 상수와 추상메소드를 중점으로 정의한 클래스
			- 키워드 
				: 정의 interface
				: 구현 implements
				: 객체의 사용방법을 요약적으로 정의한 타입
				: 개발 코드와 객체가 서로 통하는 접점
				: 구성요소 : 상수, 추상메소드, 디폴트메소드, static메소드
				: 인터페이스는 다중 구현 가능
				: 인터페이스끼리 상속 가능
				
9. 중첩 클래스, 중첩 인터페이스
	- 중첩 클래스
				: 클래스 내부에 선언한 클래스
		* 바깥 클래스
				: Outer Class
		* 내부 클래스
				: Inner Class
			- 분류
				: 인스턴스 이너 클래스
				: static 이너 클래스
				: 로컬 클래스
	- 중첩 인터페이스
				: 클래스 내부에 선언한 인터페이스
				
10. 익명 객체
				: 이름이 없는 객체
	- 익명 자식 객체
				: 부모 클래스 객체명 = new 자식클래스(...) {
						// 자식 객체 정의
				  };		
	- 익명 구현 객체
				: 인터페이스 객체명 = new 인터페이스(...) {
						// 구현 객체 정의
				  };	  	
				  
11. 예외 처리
				: 프로그램 실행 과정에서 사용자나 개발자의 잘못으로 발생하는 오류
				  -> 복구 또는 처리 가능
	- 주요 예외 클래스
		* ArithmenticException
		* ClassNotFoundException
		* ArrayindexOutofBoundException
				: 배열의 범위 초과
		* NullPointerException
				: null값의 객체를 사용
		* NumberFormatException
				: 숫자가 아닌 다른 타입을 숫자로 사용
	- 예외 처리
				: 예외 발생 가능성이 있는 코드를 처리 코드로 대응하는 것
				: try{
							예외 발생 가능 문장
					 } catch (예외타입 변수명) {
					 		예외 처리 문장
					 } finally {
					 		예외 여부와 무관하게 실행할 문장
					 }		
	- 예외 전가(throws)
				: 메소드를 호출한 곳으로 예외 처리의 책임을 떠넘기는 것
	- 예외 강제 발생 
				: throw new 예외();
				: 코드 실행 흐름에 따라, 예외 강제발생 시키는 것
	- 예외 정보
		* e.getMessage()
				: 예외 메세지와 이유를 출력
		* e.printStackTrage()
				: 예외 발생코드를 추적하여 원인을 단계별로 출력
				
12. 패키지
				: 관련된 클래스 파일들을 모아놓은 폴더
		* 클래스의 경로를 알려주는 역활
		* 같은 이름의 클래스 파일을 구별하는 역활
		
	- 종류
		* 내장패키지
				: java.~~~로 시작하는 자바에서 제공하는 패키지
		* 사용자 정의 패키지
				: 개발자가 직접 생성한 패키지
				
	- 패키지 사용
		*import
				: 다른 패키지에 작성된 클래스를 해당 클래스에 포함시키는 키워드
				  ex) import Day01.Test;
				  	  import java.util.List;
				  	  
	- JDK 주요 패키지
		* java.lang	
				: 문자열, 표준 입출력 등 기본 클래스와 인터페이스 (import 안해도 됨)
		* java.util
				: 날짜, 시간, 컬렉션 등 유용한 기능을 제공하는 클래스와 인터페이스
		* java.io	
				: 입출력 관련 클래스와 인터페이스
		* java.sql
				: JDBC 관련 클래와 인터페이스
				
13. 자바 기본 API
		* java.lang
				: Object, Wrapper Class, Math, String, StringBuffer, StringBuilder
		* java.util
				: StringTokenizer, Random, Arrays, Calendar, Date
		* java.time
				: LocalDate, LocaDatTime, ZonedDateTime
		* java.text
				: SimpleDateFormat, DecimalFormat, MessageFormat
				
14. 제네릭
				: 모든 클래스 타입을 다룰 수 있도록 타입 매개변수로 클래스/메소드를 정의하는 기법
		*객체를 생성할 때, 타입을 결정
				: class 클래스명<T> {t t;...}
				
15. 컬렉션 프레임워크
				: 데이터를 저장하는 자료 구조 + 데이터를 처리하는 알고리즘
				  자료구조와 알고리즘을 표준화된 방법으로 제공하는 클래스의 모음
	- 컬렉션
				: 갯수가 변하는 객체 요소의 모음
				: 요소로 참조타입만 사용가능 (기본타입 사용 불가)
				: 객체를 요소로 다루는 동적 자료구조
				: 요소를 추가/삭제 가능
				: 요소의 갯수에 따라서 크기가 자동 조절
				
	- 주요 인터페이스
		* List<E>
				: 순서 있음, 요소 중복가능
				: ArrayList, LinkedList, Vector, Stack
		* Set<E>
				: 순서 없음, 요소 중복 불가
				: HashSet
		* Queue<E>
				: 큐 자료 구조를 관리
				: LinkedList
		* Map<K, V>
				: 키, 값을 쌍으로 요소를 관리
				: HashMap
				
	
